using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ComputerPlay : MonoBehaviour
{
	/*
	//블럭이 생성되었을 때 메소드 실행됨(블럭의 상태 I , O, T , S , Z , L ,J 값 인수로 받아옴 : status )
	calRotationBlock(status)
	{

		//비어있는 리스트(rotationBlock) 하나 함수 내부에 생성
		List<Vector2Int> rotationBlock = new List<Vector2Int>;

		//받아온status로 switch-case문 써서 rotationBlock 리스트에 회전가능한 상태 채움

		switch (status)
		{
			case 'I':
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))

				break;
			case 'O':
				break;
			case 'T':
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))

				break;
			case 'S':
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))

				break;
			case 'Z':
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))

				break;
			case 'L':
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))

				break;
			case 'J':
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))
				rotationBlock.Add(Vector2Int(,))

				break;
			default:
				break;
		}

		X 0 ~X 9까지 반복문{
			resultScore = 0; // 회전 상태에 대한 가중치
			Dictionary<float, Vector2> rotationStatus = new Dictionary<int, Vector2> // X에 대한 가중치, rotation

			rotationBlock 리스트 원소수만큼 반복문(foreach)
			{
				//해당 위치 가중치 값 계산
				if (rotationBlock이 해당 X에 착지 가능하면){
					rotationScore = 해당 회전 상태의 닿는 면에 대한 가중치
					if(rotationScore > resultScore){
						resultRotation = rotationBlock;
					}
				} 
			}
			rotationStatus[X에 대한 가중치] = resultRotation;
		}
		
	*/


}
